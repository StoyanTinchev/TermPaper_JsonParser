<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="class_json_element" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>JsonElement</compoundname>
    <derivedcompoundref refid="class_json_array" prot="public" virt="non-virtual">JsonArray</derivedcompoundref>
    <derivedcompoundref refid="class_json_object" prot="public" virt="non-virtual">JsonObject</derivedcompoundref>
    <derivedcompoundref refid="class_json_value" prot="public" virt="non-virtual">JsonValue</derivedcompoundref>
    <includes refid="json__element_8h" local="no">json_element.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_json_element_1a65dbb209b55ae334059698d025783fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual JsonElement::~JsonElement</definition>
        <argsstring>()=default</argsstring>
        <name>~JsonElement</name>
        <qualifiedname>JsonElement::~JsonElement</qualifiedname>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="27" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1acaa559e1be09dff2f6b347775d0983dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string JsonElement::to_string</definition>
        <argsstring>() const =0</argsstring>
        <name>to_string</name>
        <qualifiedname>JsonElement::to_string</qualifiedname>
        <reimplementedby refid="class_json_array_1ae65670649aedfad0375b1f3b8b6a1b20">to_string</reimplementedby>
        <reimplementedby refid="class_json_object_1a68d96ac09e41acba1492abc5ec1a0eea">to_string</reimplementedby>
        <reimplementedby refid="class_json_value_1a8ad1e0635db285f3f0b525b144260fc3">to_string</reimplementedby>
        <briefdescription>
<para>Convert the JSON element to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string representation of the JSON element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="33" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1a89efc03621132a676694994be0b88ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt; std::string &gt; JsonElement::search</definition>
        <argsstring>(const std::string &amp;key)=0</argsstring>
        <name>search</name>
        <qualifiedname>JsonElement::search</qualifiedname>
        <reimplementedby refid="class_json_array_1a79a316409a5f3fa8ebab101eb2d1e313">search</reimplementedby>
        <reimplementedby refid="class_json_object_1a096210e59d3c570a970944cda0486274">search</reimplementedby>
        <reimplementedby refid="class_json_value_1a39576338933618f8f47cee8e6141979b">search</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Search for a key in the JSON element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to search for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of strings representing the path to the key, or an empty vector if the key is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="40" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1aff8ec1964ccbfcd7d450d66d9956e3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool JsonElement::contains</definition>
        <argsstring>(const std::string &amp;value)=0</argsstring>
        <name>contains</name>
        <qualifiedname>JsonElement::contains</qualifiedname>
        <reimplementedby refid="class_json_array_1a1f09fd4a5b4ec045945e3ed9d301c3d9">contains</reimplementedby>
        <reimplementedby refid="class_json_object_1ae008482ab6e401e07187766c1a4e006a">contains</reimplementedby>
        <reimplementedby refid="class_json_value_1a340e8d17bc44d0618fc82f48f0202dc4">contains</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Check if the JSON element contains a certain value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to check for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the value is found, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="47" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1a484d825f5e631f899fdff7ddb486a585" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void JsonElement::set</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;path, const std::string &amp;new_value)=0</argsstring>
        <name>set</name>
        <qualifiedname>JsonElement::set</qualifiedname>
        <reimplementedby refid="class_json_array_1afa38f83b7b285940d66117104be65748">set</reimplementedby>
        <reimplementedby refid="class_json_object_1ae30d3d2fa69c1a965f489bf6a8146c53">set</reimplementedby>
        <reimplementedby refid="class_json_value_1ab859138a2fa51b49669f8bc6c659e9c1">set</reimplementedby>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
<para>Set the value at a certain path in the JSON element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of strings representing the path to the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="54" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1a4dd348e9dc77f27397d023405b5bcd45" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void JsonElement::create</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;path, const std::string &amp;value)=0</argsstring>
        <name>create</name>
        <qualifiedname>JsonElement::create</qualifiedname>
        <reimplementedby refid="class_json_array_1a3869c3769f8d253a7a639c2e0f141688">create</reimplementedby>
        <reimplementedby refid="class_json_object_1ab3d665ec4299314e1aef378e60e0a0ca">create</reimplementedby>
        <reimplementedby refid="class_json_value_1accce4336f6462bd1572fe09cfb8ba420">create</reimplementedby>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a new key-value pair at a certain path in the JSON element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of strings representing the path to the new key-value pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set for the new key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="61" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1ac6330f1734e30ed7a316087e68fc6f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void JsonElement::delete_element</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;path)=0</argsstring>
        <name>delete_element</name>
        <qualifiedname>JsonElement::delete_element</qualifiedname>
        <reimplementedby refid="class_json_array_1ae93c0b17ebef659d034eaeb3dd736ffa">delete_element</reimplementedby>
        <reimplementedby refid="class_json_object_1ac6fc5f1ed2cd446dfb5a775f432f76d2">delete_element</reimplementedby>
        <reimplementedby refid="class_json_value_1a22721a96f72f09a56e2004f24ea80eee">delete_element</reimplementedby>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a key-value pair at a certain path in the JSON element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of strings representing the path to the key-value pair to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="67" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_json_element_1a2ddc931b379e450ce2ebd4e240e5a628" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void JsonElement::move</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;fromPath, const std::vector&lt; std::string &gt; &amp;toPath)=0</argsstring>
        <name>move</name>
        <qualifiedname>JsonElement::move</qualifiedname>
        <reimplementedby refid="class_json_array_1ad86b8c638a507fee7db3d58d43e1d7a1">move</reimplementedby>
        <reimplementedby refid="class_json_object_1a9c475b7b6466243971fe706db3ec96c5">move</reimplementedby>
        <reimplementedby refid="class_json_value_1a48f892b291985cc0e8e5d1804a4776ec">move</reimplementedby>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>fromPath</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>toPath</declname>
        </param>
        <briefdescription>
<para>Move a key-value pair from one path to another in the JSON element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromPath</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of strings representing the current path of the key-value pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toPath</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of strings representing the new path for the key-value pair. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json_base/json_element.h" line="74" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An abstract class representing an element in a JSON document. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_json_element" kindref="compound">JsonElement</ref> is a base class for all types of elements that can appear in a JSON document, such as arrays, objects, and primitive values (strings, numbers, booleans, null). It provides a common interface for operations that can be performed on any JSON element, such as converting it to a string, searching for a key, checking for the presence of a value, and modifying its contents. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>JsonArray</label>
        <link refid="class_json_array"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>JsonElement</label>
        <link refid="class_json_element"/>
      </node>
      <node id="3">
        <label>JsonObject</label>
        <link refid="class_json_object"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>JsonValue</label>
        <link refid="class_json_value"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/json_base/json_element.h" line="22" column="1" bodyfile="include/json_base/json_element.h" bodystart="22" bodyend="75"/>
    <listofallmembers>
      <member refid="class_json_element_1aff8ec1964ccbfcd7d450d66d9956e3f7" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>contains</name></member>
      <member refid="class_json_element_1a4dd348e9dc77f27397d023405b5bcd45" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>create</name></member>
      <member refid="class_json_element_1ac6330f1734e30ed7a316087e68fc6f0f" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>delete_element</name></member>
      <member refid="class_json_element_1a2ddc931b379e450ce2ebd4e240e5a628" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>move</name></member>
      <member refid="class_json_element_1a89efc03621132a676694994be0b88ee5" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>search</name></member>
      <member refid="class_json_element_1a484d825f5e631f899fdff7ddb486a585" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>set</name></member>
      <member refid="class_json_element_1acaa559e1be09dff2f6b347775d0983dc" prot="public" virt="pure-virtual"><scope>JsonElement</scope><name>to_string</name></member>
      <member refid="class_json_element_1a65dbb209b55ae334059698d025783fed" prot="public" virt="virtual"><scope>JsonElement</scope><name>~JsonElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
